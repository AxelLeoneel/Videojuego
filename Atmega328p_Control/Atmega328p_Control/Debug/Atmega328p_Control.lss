
Atmega328p_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000046a  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800102  00800102  00000500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b16  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b1  00000000  00000000  00001106  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000648  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048b  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000037a  00000000  00000000  0000251f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  9e:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
#include "UARTlib.h"

void initUART()
{
	// Define TX (PD0) as OUT
	DDRD |= (1 << DDD1);
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	// Define RX (PD1) as IN
	DDRD &= ~(1 << DDD0);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	// Configure UCSR0A
	UCSR0A = 0x00;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	// Configure UCSR0B (enable receive interrupt, enable reception, enable transmission)
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0);
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Configure UCSR0C (asynchronous normal, no parity, 1 stop bit, 8 bit rate)
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	// Configure baud rate, UBRR0 = 103 --> 9600 @ 16MHz
	UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <writeChar>:
}

void writeChar(char caracter)
{
	while((UCSR0A & (1 << UDRE0)) == 0);
  d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d4:	95 ff       	sbrs	r25, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <writeChar>
	UDR0 = caracter; // Rewrite character until UDR0 is empty and ready to receive again
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  dc:	08 95       	ret

000000de <setup>:
	}
}

void setup(void)
{
	cli();
  de:	f8 94       	cli
	// Define F_CPU PreScaler = 1
	CLKPR |= (1 << CLKPCE);
  e0:	e1 e6       	ldi	r30, 0x61	; 97
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	80 83       	st	Z, r24
	CLKPR &= ~((1 << CLKPS3) | (1 << CLKPS2) | (1 << CLKPS1) | (1 << CLKPS0));
  ea:	80 81       	ld	r24, Z
  ec:	80 7f       	andi	r24, 0xF0	; 240
  ee:	80 83       	st	Z, r24
	
	// GPIO
	DDRB &= ~((1 << DDB2) | (1 << DDB1) | (1 << DDB0)); // Input
  f0:	84 b1       	in	r24, 0x04	; 4
  f2:	88 7f       	andi	r24, 0xF8	; 248
  f4:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB2) | (1 << PORTB1) | (1 << PORTB0); // Pull-up
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	87 60       	ori	r24, 0x07	; 7
  fa:	85 b9       	out	0x05, r24	; 5
	
	// Initialize UART
	initUART();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
	
	// ADC configuration
	ADMUX = 0x00;
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	10 82       	st	Z, r1
	ADMUX |= (1	<< REFS0); // AVcc
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR); // Activate justification Left
 10c:	80 81       	ld	r24, Z
 10e:	80 62       	ori	r24, 0x20	; 32
 110:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX2) | (1 << MUX1); // ADC6 Channel
 112:	80 81       	ld	r24, Z
 114:	86 60       	ori	r24, 0x06	; 6
 116:	80 83       	st	Z, r24
	// Begin ADC Control & Status Register
	ADCSRA = 0x00;
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADIE); // Enable interruptions
 11e:	80 81       	ld	r24, Z
 120:	88 60       	ori	r24, 0x08	; 8
 122:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // PreScaler = 128 --> f = 125kHz
 124:	80 81       	ld	r24, Z
 126:	87 60       	ori	r24, 0x07	; 7
 128:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // ADC enable
 12a:	80 81       	ld	r24, Z
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // Start first conversion
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	80 83       	st	Z, r24
	
	// Timer0 in normal mode (0C1A and OC1B disconnected)
	TCCR0A = 0x00;
 136:	14 bc       	out	0x24, r1	; 36
	// Timer0 PreScaler = 1024 (Overflow = 16ms) and off
	TCCR0B |= (1 << CS02) | (1 << CS00);
 138:	85 b5       	in	r24, 0x25	; 37
 13a:	85 60       	ori	r24, 0x05	; 5
 13c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 &= ~(1 << TOIE0);
 13e:	ee e6       	ldi	r30, 0x6E	; 110
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	80 83       	st	Z, r24
	
	// Timer2 in normal mode (0C2A and OC2B disconnected)
	TCCR2A = 0x00;
 148:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	// Timer2 PreScaler = 1024 (Overflow = 16ms) and off
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20);
 14c:	e1 eb       	ldi	r30, 0xB1	; 177
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	87 60       	ori	r24, 0x07	; 7
 154:	80 83       	st	Z, r24
	TIMSK2 &= ~(1 << TOIE2);
 156:	e0 e7       	ldi	r30, 0x70	; 112
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	8e 7f       	andi	r24, 0xFE	; 254
 15e:	80 83       	st	Z, r24
	
	// Enable Pin Change Interruptions for PCINT0 and PCINT1
	PCICR = (1 << PCIE0);
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT1) | (1 << PCINT0);
 166:	eb e6       	ldi	r30, 0x6B	; 107
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	87 60       	ori	r24, 0x07	; 7
 16e:	80 83       	st	Z, r24
	sei();
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <main>:

void setup(void);

int main(void)
{
	setup();
 174:	0e 94 6f 00 	call	0xde	; 0xde <setup>
	while (1)
	{
		// Wait for buttons
		if (trigger1)
 178:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <trigger1>
 17c:	88 23       	and	r24, r24
 17e:	69 f0       	breq	.+26     	; 0x19a <main+0x26>
		{
			// Toggle led
			trigger1 = 0;
 180:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <trigger1>
			writeChar(cmdPUNCH);
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 18a:	8a e0       	ldi	r24, 0x0A	; 10
 18c:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			// Wait some time and return to steady position
			TIMSK2 |= (1 << TOIE2);
 190:	e0 e7       	ldi	r30, 0x70	; 112
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	81 60       	ori	r24, 0x01	; 1
 198:	80 83       	st	Z, r24
		}
		if (trigger2)
 19a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <trigger2>
 19e:	88 23       	and	r24, r24
 1a0:	69 f0       	breq	.+26     	; 0x1bc <main+0x48>
		{
			// Toggle led
			trigger2 = 0;
 1a2:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <trigger2>
			writeChar(cmdCHANGE);
 1a6:	81 e3       	ldi	r24, 0x31	; 49
 1a8:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			// Wait some time and return to steady position
			TIMSK2 |= (1 << TOIE2);
 1b2:	e0 e7       	ldi	r30, 0x70	; 112
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	81 60       	ori	r24, 0x01	; 1
 1ba:	80 83       	st	Z, r24
		}
		if (trigger3)
 1bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <trigger3>
 1c0:	88 23       	and	r24, r24
 1c2:	69 f0       	breq	.+26     	; 0x1de <main+0x6a>
		{
			// Toggle led
			trigger3 = 0;
 1c4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <trigger3>
			writeChar(cmdPOWER);
 1c8:	86 e3       	ldi	r24, 0x36	; 54
 1ca:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			// Wait some time and return to steady position
			TIMSK2 |= (1 << TOIE2);
 1d4:	e0 e7       	ldi	r30, 0x70	; 112
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 83       	st	Z, r24
		}
		
		// Process ADC values and send via UART0
		// JOYSTICK - X axis
		if (adcvalX <= 80 && !joyX_active) {
 1de:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adcvalX>
 1e2:	81 35       	cpi	r24, 0x51	; 81
 1e4:	70 f4       	brcc	.+28     	; 0x202 <main+0x8e>
 1e6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <joyX_active>
 1ea:	81 11       	cpse	r24, r1
 1ec:	0a c0       	rjmp	.+20     	; 0x202 <main+0x8e>
			writeChar(cmdUP);
 1ee:	82 e3       	ldi	r24, 0x32	; 50
 1f0:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			joyX_active = 1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <joyX_active>
 200:	26 c0       	rjmp	.+76     	; 0x24e <main+0xda>
		}
		else if (adcvalX >= 180 && !joyX_active) {
 202:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adcvalX>
 206:	84 3b       	cpi	r24, 0xB4	; 180
 208:	70 f0       	brcs	.+28     	; 0x226 <main+0xb2>
 20a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <joyX_active>
 20e:	81 11       	cpse	r24, r1
 210:	0a c0       	rjmp	.+20     	; 0x226 <main+0xb2>
			writeChar(cmdDOWN);
 212:	83 e3       	ldi	r24, 0x33	; 51
 214:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 218:	8a e0       	ldi	r24, 0x0A	; 10
 21a:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			joyX_active = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <joyX_active>
 224:	14 c0       	rjmp	.+40     	; 0x24e <main+0xda>
		}
		else if (adcvalX > 80 && adcvalX < 180 && joyX_active) {
 226:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adcvalX>
 22a:	81 35       	cpi	r24, 0x51	; 81
 22c:	80 f0       	brcs	.+32     	; 0x24e <main+0xda>
 22e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <adcvalX>
 232:	84 3b       	cpi	r24, 0xB4	; 180
 234:	60 f4       	brcc	.+24     	; 0x24e <main+0xda>
 236:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <joyX_active>
 23a:	88 23       	and	r24, r24
 23c:	41 f0       	breq	.+16     	; 0x24e <main+0xda>
			writeChar(cmdDEFAULT);
 23e:	87 e3       	ldi	r24, 0x37	; 55
 240:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			joyX_active = 0;
 24a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <joyX_active>
		}

		// JOYSTICK - Y axis
		if (adcvalY <= 80 && !joyY_active) {
 24e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adcvalY>
 252:	81 35       	cpi	r24, 0x51	; 81
 254:	70 f4       	brcc	.+28     	; 0x272 <main+0xfe>
 256:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 25a:	81 11       	cpse	r24, r1
 25c:	0a c0       	rjmp	.+20     	; 0x272 <main+0xfe>
			writeChar(cmdLEFT);
 25e:	84 e3       	ldi	r24, 0x34	; 52
 260:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			joyY_active = 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 270:	83 cf       	rjmp	.-250    	; 0x178 <main+0x4>
		}
		else if (adcvalY >= 180 && !joyY_active) {
 272:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adcvalY>
 276:	84 3b       	cpi	r24, 0xB4	; 180
 278:	70 f0       	brcs	.+28     	; 0x296 <main+0x122>
 27a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 27e:	81 11       	cpse	r24, r1
 280:	0a c0       	rjmp	.+20     	; 0x296 <main+0x122>
			writeChar(cmdRIGHT);
 282:	85 e3       	ldi	r24, 0x35	; 53
 284:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			joyY_active = 1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 294:	71 cf       	rjmp	.-286    	; 0x178 <main+0x4>
		}
		else if (adcvalY > 80 && adcvalY < 180 && joyY_active) {
 296:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adcvalY>
 29a:	81 35       	cpi	r24, 0x51	; 81
 29c:	08 f4       	brcc	.+2      	; 0x2a0 <main+0x12c>
 29e:	6c cf       	rjmp	.-296    	; 0x178 <main+0x4>
 2a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <adcvalY>
 2a4:	84 3b       	cpi	r24, 0xB4	; 180
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <main+0x136>
 2a8:	67 cf       	rjmp	.-306    	; 0x178 <main+0x4>
 2aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2ae:	88 23       	and	r24, r24
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <main+0x140>
 2b2:	62 cf       	rjmp	.-316    	; 0x178 <main+0x4>
			writeChar(cmdDEFAULT);
 2b4:	87 e3       	ldi	r24, 0x37	; 55
 2b6:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			writeChar('\n');
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
			joyY_active = 0;
 2c0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 2c4:	59 cf       	rjmp	.-334    	; 0x178 <main+0x4>

000002c6 <__vector_3>:
	PCMSK0 |= (1 << PCINT2) | (1 << PCINT1) | (1 << PCINT0);
	sei();
}

ISR(PCINT0_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
 2d2:	ef 93       	push	r30
 2d4:	ff 93       	push	r31
	// Enable Timer0 Overflow Interruption
	TIMSK0 |= (1 << TOIE0);
 2d6:	ee e6       	ldi	r30, 0x6E	; 110
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	80 83       	st	Z, r24
	// Disable Pin Change Interruptions for buttons
	PCMSK0 &= ~( (1 << PCINT2) | (1 << PCINT1) | (1 << PCINT0));
 2e0:	eb e6       	ldi	r30, 0x6B	; 107
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	88 7f       	andi	r24, 0xF8	; 248
 2e8:	80 83       	st	Z, r24
	// Save fist position
	portState0 = PINB & ((1 << PINB0) | (1 << PINB1) | (1 << PINB2));
 2ea:	83 b1       	in	r24, 0x03	; 3
 2ec:	87 70       	andi	r24, 0x07	; 7
 2ee:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <portState0>
}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
 30e:	9f 93       	push	r25
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	// Counter for 16 ms x 2 = 32 ms
	counter++;
 314:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter>
 318:	8f 5f       	subi	r24, 0xFF	; 255
 31a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <counter>
	if (counter == 2)
 31e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <counter>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	59 f5       	brne	.+86     	; 0x37c <__vector_16+0x7a>
	{
		counter = 0;
 326:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <counter>
		// Save new value and compare initial and final states
		portState1 = PINB & ((1 << PINB0) | (1 << PINB1) | (1 << PINB2));
 32a:	83 b1       	in	r24, 0x03	; 3
 32c:	87 70       	andi	r24, 0x07	; 7
 32e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <portState1>
		// This works for low flank
		if (portState0 == portState1)
 332:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <portState0>
 336:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <portState1>
 33a:	98 13       	cpse	r25, r24
 33c:	15 c0       	rjmp	.+42     	; 0x368 <__vector_16+0x66>
		{
			// Detect PB0 down flank
			if ( (portState0 & (1 << PINB0)) == 0 )
 33e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <portState0>
 342:	80 fd       	sbrc	r24, 0
 344:	03 c0       	rjmp	.+6      	; 0x34c <__vector_16+0x4a>
			trigger1 = 1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <trigger1>
			// Detect PB1 down flank
			if ( (portState0 & (1 << PINB1)) == 0 )
 34c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <portState0>
 350:	81 fd       	sbrc	r24, 1
 352:	03 c0       	rjmp	.+6      	; 0x35a <__vector_16+0x58>
			trigger2 = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <trigger2>
			// Detect PB2 down flank
			if ( (portState0 & (1 << PINB2)) == 0 )
 35a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <portState0>
 35e:	82 fd       	sbrc	r24, 2
 360:	03 c0       	rjmp	.+6      	; 0x368 <__vector_16+0x66>
			trigger3 = 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <trigger3>
		}
		// Enable Pin Change Interruptions
		PCMSK0 |= (1 << PCINT2) | (1 << PCINT1) | (1 << PCINT0);
 368:	eb e6       	ldi	r30, 0x6B	; 107
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	87 60       	ori	r24, 0x07	; 7
 370:	80 83       	st	Z, r24
		// Disable Timer0 Overflow Interruption
		TIMSK0 &= ~(1 << TOIE0);
 372:	ee e6       	ldi	r30, 0x6E	; 110
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	8e 7f       	andi	r24, 0xFE	; 254
 37a:	80 83       	st	Z, r24
	}
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	// Set flag only after 150ms approx
	counter2++;
 3b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter2>
 3b4:	8f 5f       	subi	r24, 0xFF	; 255
 3b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <counter2>
	if (counter2 == 10)
 3ba:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <counter2>
 3be:	8a 30       	cpi	r24, 0x0A	; 10
 3c0:	69 f4       	brne	.+26     	; 0x3dc <__vector_9+0x4e>
	{
		counter2 = 0;
 3c2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <counter2>
		writeChar(cmdDEFAULT);
 3c6:	87 e3       	ldi	r24, 0x37	; 55
 3c8:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
		writeChar('\n');
 3cc:	8a e0       	ldi	r24, 0x0A	; 10
 3ce:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
		TIMSK2 &= ~(1 << TOIE2);
 3d2:	e0 e7       	ldi	r30, 0x70	; 112
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	80 83       	st	Z, r24
	}
}
 3dc:	ff 91       	pop	r31
 3de:	ef 91       	pop	r30
 3e0:	bf 91       	pop	r27
 3e2:	af 91       	pop	r26
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	7f 91       	pop	r23
 3ea:	6f 91       	pop	r22
 3ec:	5f 91       	pop	r21
 3ee:	4f 91       	pop	r20
 3f0:	3f 91       	pop	r19
 3f2:	2f 91       	pop	r18
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__vector_21>:


ISR(ADC_vect)
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	8f 93       	push	r24
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	if (channel == 6)
 40e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 412:	86 30       	cpi	r24, 0x06	; 6
 414:	71 f4       	brne	.+28     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
	{
		// Store ADC value
		adcvalX = ADCH;
 416:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 41a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adcvalX>
		// Change channel
		ADMUX = (ADMUX & 0xF0) | 7; // ADC7 Channel
 41e:	ec e7       	ldi	r30, 0x7C	; 124
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	80 7f       	andi	r24, 0xF0	; 240
 426:	87 60       	ori	r24, 0x07	; 7
 428:	80 83       	st	Z, r24
		channel = 7;
 42a:	87 e0       	ldi	r24, 0x07	; 7
 42c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 430:	0d c0       	rjmp	.+26     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	}
	else
	{
		// Store ADC value
		adcvalY = ADCH;
 432:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 436:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <adcvalY>
		// Change channel
		ADMUX = (ADMUX & 0xF0) | 6; // ADC6 Channel
 43a:	ec e7       	ldi	r30, 0x7C	; 124
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	80 7f       	andi	r24, 0xF0	; 240
 442:	86 60       	ori	r24, 0x06	; 6
 444:	80 83       	st	Z, r24
		channel = 6;
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	// Start conversion
	ADCSRA |= (1 << ADSC);
 44c:	ea e7       	ldi	r30, 0x7A	; 122
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	80 64       	ori	r24, 0x40	; 64
 454:	80 83       	st	Z, r24
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	8f 91       	pop	r24
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
